/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './app/__root';
import { Route as DashboardRouteImport } from './app/dashboard/route';
import { Route as IndexImport } from './app/index';
import { Route as DashboardIndexImport } from './app/dashboard/index';
import { Route as DashboardMintImport } from './app/dashboard/mint';
import { Route as DashboardCreateImport } from './app/dashboard/create';

// Create/Update Routes

const DashboardRouteRoute = DashboardRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => rootRoute,
} as any);

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any);

const DashboardIndexRoute = DashboardIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => DashboardRouteRoute,
} as any);

const DashboardMintRoute = DashboardMintImport.update({
  id: '/mint',
  path: '/mint',
  getParentRoute: () => DashboardRouteRoute,
} as any);

const DashboardCreateRoute = DashboardCreateImport.update({
  id: '/create',
  path: '/create',
  getParentRoute: () => DashboardRouteRoute,
} as any);

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/';
      path: '/';
      fullPath: '/';
      preLoaderRoute: typeof IndexImport;
      parentRoute: typeof rootRoute;
    };
    '/dashboard': {
      id: '/dashboard';
      path: '/dashboard';
      fullPath: '/dashboard';
      preLoaderRoute: typeof DashboardRouteImport;
      parentRoute: typeof rootRoute;
    };
    '/dashboard/create': {
      id: '/dashboard/create';
      path: '/create';
      fullPath: '/dashboard/create';
      preLoaderRoute: typeof DashboardCreateImport;
      parentRoute: typeof DashboardRouteImport;
    };
    '/dashboard/mint': {
      id: '/dashboard/mint';
      path: '/mint';
      fullPath: '/dashboard/mint';
      preLoaderRoute: typeof DashboardMintImport;
      parentRoute: typeof DashboardRouteImport;
    };
    '/dashboard/': {
      id: '/dashboard/';
      path: '/';
      fullPath: '/dashboard/';
      preLoaderRoute: typeof DashboardIndexImport;
      parentRoute: typeof DashboardRouteImport;
    };
  }
}

// Create and export the route tree

interface DashboardRouteRouteChildren {
  DashboardCreateRoute: typeof DashboardCreateRoute;
  DashboardMintRoute: typeof DashboardMintRoute;
  DashboardIndexRoute: typeof DashboardIndexRoute;
}

const DashboardRouteRouteChildren: DashboardRouteRouteChildren = {
  DashboardCreateRoute: DashboardCreateRoute,
  DashboardMintRoute: DashboardMintRoute,
  DashboardIndexRoute: DashboardIndexRoute,
};

const DashboardRouteRouteWithChildren = DashboardRouteRoute._addFileChildren(
  DashboardRouteRouteChildren
);

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute;
  '/dashboard': typeof DashboardRouteRouteWithChildren;
  '/dashboard/create': typeof DashboardCreateRoute;
  '/dashboard/mint': typeof DashboardMintRoute;
  '/dashboard/': typeof DashboardIndexRoute;
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute;
  '/dashboard/create': typeof DashboardCreateRoute;
  '/dashboard/mint': typeof DashboardMintRoute;
  '/dashboard': typeof DashboardIndexRoute;
}

export interface FileRoutesById {
  __root__: typeof rootRoute;
  '/': typeof IndexRoute;
  '/dashboard': typeof DashboardRouteRouteWithChildren;
  '/dashboard/create': typeof DashboardCreateRoute;
  '/dashboard/mint': typeof DashboardMintRoute;
  '/dashboard/': typeof DashboardIndexRoute;
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath;
  fullPaths:
    | '/'
    | '/dashboard'
    | '/dashboard/create'
    | '/dashboard/mint'
    | '/dashboard/';
  fileRoutesByTo: FileRoutesByTo;
  to: '/' | '/dashboard/create' | '/dashboard/mint' | '/dashboard';
  id:
    | '__root__'
    | '/'
    | '/dashboard'
    | '/dashboard/create'
    | '/dashboard/mint'
    | '/dashboard/';
  fileRoutesById: FileRoutesById;
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute;
  DashboardRouteRoute: typeof DashboardRouteRouteWithChildren;
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  DashboardRouteRoute: DashboardRouteRouteWithChildren,
};

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>();

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/dashboard"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/dashboard": {
      "filePath": "dashboard/route.tsx",
      "children": [
        "/dashboard/create",
        "/dashboard/mint",
        "/dashboard/"
      ]
    },
    "/dashboard/create": {
      "filePath": "dashboard/create.tsx",
      "parent": "/dashboard"
    },
    "/dashboard/mint": {
      "filePath": "dashboard/mint.tsx",
      "parent": "/dashboard"
    },
    "/dashboard/": {
      "filePath": "dashboard/index.tsx",
      "parent": "/dashboard"
    }
  }
}
ROUTE_MANIFEST_END */
